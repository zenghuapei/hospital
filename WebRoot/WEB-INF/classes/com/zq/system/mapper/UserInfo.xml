<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zq.system.dao.UserInfoDao">

	<resultMap type="UserInfo" id="userinfo">
		<result property="userId" column="user_id"/>
		<result property="userName" column="user_Name"/>
		<result property="sex" column="sex"/>
		<result property="account" column="account"/>
		<result property="birthday" column="birthday"/>
		<result property="idCard" column="id_card"/>
		<result property="relationway" column="relationway"/>
		<result property="address" column="address"/>
		<result property="userType" column="user_type"/>
		<result property="userRegister" column="user_register"/>
		<result property="email" column="email"/>
	</resultMap>
	<!-- <resultMap type="User" id="userWithAddress">
		<constructor>
			<idArg column="userid" javaType="long" />
			<arg column="name" javaType="string" />
			<arg column="age" javaType="int" />
			<arg column="phone" javaType="string" />
			<arg column="passwd" javaType="string" />
		</constructor>
		<collection property="addrs" javaType="arraylist" ofType="Address"
			column="ownerid" resultMap="addr"/>
	</resultMap> -->
	
	<!--<resultMap type="User" id="user">
		<id column="uid" javaType="long" />
		<result column="name" javaType="string" />
		<result column="age" javaType="int" />
		<result column="phone" javaType="string" />
		<result column="passwd" javaType="string" />
	</resultMap>-->

	<!-- <insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="uid">
		insert into foo.user(name,age,phone,passwd) values(#{name},#{age},#{phone},#{passwd});
	</insert>
	<delete id="deleteUser" parameterType="long">
		delete from foo.user where uid = #{uid}
	</delete>
	<update id="updateUser" parameterType="User">
		update foo.user set 
		<trim suffixOverrides=",">鍘婚櫎鐢熸垚鐨凷QL璇彞鍚庨潰鐨?,"
			<if test="name!=null">name=#{name}, </if>
			<if test="phone!=null">phone=#{phone}, </if>
			<if test="age!=null">age=#{age}, </if>
			<if test="passwd!=null">passwd=#{passwd}</if>
		</trim>
		<where>userid=#{uid}</where>
	</update>
	
	<select id="getAllUser" resultMap="userWithAddress" parameterType="map">
		select <include refid="userColumn"/> , <include refid="addrColumn"/>
		from userinfo u left join address a 
		on u.userid = a.ownerid
		
	</select>
	<select id="getUser" resultMap="userWithAddress" parameterType="long">
		select <include refid="userColumn"/>,<include refid="addrColumn"/> from userinfo u
		left outer join foo.address a on u.userid = a.ownerid
		<where>u.userid=#{uid}</where>
	</select>
	 -->
	<!--添加用户-->
	<insert id="insertUserInfo" parameterType="UserInfo">
	insert into user_info(user_id,user_Name,account,password,Sex,birthday,id_card,relationway,address,user_type,user_register) 
	
	values(#{userId},#{userName},#{account},#{password},#{sex},#{birthday},#{idCard},#{relationway},#{address},#{userType},#{userRegister})	
	</insert>
	<!--查询用户和账号信息-->
	<select id="getUserInfo" resultMap="userinfo" parameterType="string">
		SELECT
			u.user_id,
			u.user_name,
			u.sex,
			u.birthday,
			u.account,
			u.`password`,
			u.id_card,
			u.relationway,
			u.user_type,
			u.address,
			u.user_register
			from user_info u
		<where>u.account=#{account}</where>
	
	</select>
	
	<!--查询机构下面的用户-->
	<select id="getPageUserInfo" resultMap="userinfo" parameterType="Page">
			select u.user_id,
		       u.user_name,
		       u.user_sex,
		       u.user_birthday,
		       u.user_recruitment,
		       u.user_newaddress,
		       u.user_education,
		       u.user_state,
		       u.user_register,
		       u.user_number,
		       u.user_email,
		       u.user_urgentnumber
		  from user_info u, s_userdepartment d
		 where d.leveldepartment like #{params.departmentId} || '%'
	</select>
	
	
</mapper>



















